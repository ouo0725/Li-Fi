DC_Huff = ['00', '010', '011', '100', '101', '110', '1110', '11110', '111110', '1111110', '11111110', '111111110' ]

iAC_Huff = ['00','01','100','1011','11010','1111000','11111000','1111110110','1111111110000010','1111111110000011',
            '1100','11011','1111001','111110110','11111110110','1111111110000100','1111111110000101','1111111110000110','1111111110000111','1111111110001000',
            '11100','11111001','1111110111','111111110100','1111111110001001','1111111110001010','1111111110001011','1111111110001100','1111111110001101','1111111110001110',
            '111010','111110111','111111110101','1111111110001111','1111111110010000','1111111110010001','1111111110010010','1111111110010011','1111111110010100','1111111110010101',
            '111011','1111111000','1111111110010110','1111111110010111','1111111110011000','1111111110011001','1111111110011010','1111111110011011','1111111110011100','1111111110011101',
            '1111010','11111110111','1111111110011110','1111111110011111','1111111110100000','1111111110100001','1111111110100010','1111111110100011','1111111110100100','1111111110100101',
            '1111011','111111110110','1111111110100110','1111111110100111','1111111110101000','1111111110101001','1111111110101010','1111111110101011','1111111110101100','1111111110101101',
            '11111010','111111110111','1111111110101110','1111111110101111','1111111110110000','1111111110110001','1111111110110010','1111111110110011','1111111110110100','1111111110110101',
            '111111000','111111111000000','1111111110110110','1111111110110111','1111111110111000','1111111110111001','1111111110111010','1111111110111011','1111111110111100','1111111110111101',
            '111111001','1111111110111110','1111111110111111','1111111111000000','1111111111000001','1111111111000010','1111111111000011','1111111111000100','1111111111000101','1111111111000110',
            '111111010','1111111111000111','1111111111001000','1111111111001001','1111111111001010','1111111111001011','1111111111001100','1111111111001101','1111111111001110','1111111111001111',
            '1111111001','1111111111010000','1111111111010001','1111111111010010','1111111111010011','1111111111010100','1111111111010101','1111111111010110','1111111111010111','1111111111011000',
            '1111111010','1111111111011001','1111111111011010','1111111111011011','1111111111011100','1111111111011101','1111111111011110','1111111111011111','1111111111100000','1111111111100001',
            '11111111000','1111111111100010','1111111111100011','1111111111100100','1111111111100101','1111111111100110','1111111111100111','1111111111101000','1111111111101001','1111111111101010',
            '1111111111101011','1111111111101100','1111111111101101','1111111111101110','1111111111101111','1111111111110000','1111111111110001','1111111111110010','1111111111110011','1111111111110100',
            '1111111111110101','1111111111110110','1111111111110110','1111111111110111','1111111111111000','1111111111111001','1111111111111010','1111111111111011','1111111111111100','1111111111111101','1111111111111110']

import numpy as np

def ac(ac_values):
    if ac_values[-1] == 'EOB':
        ac_values[-1] = [0,0]
        #print(ac_values)
    ac_len = len(ac_values)
    #轉成二進制並判斷長度
    for i in range(ac_len):
        if ac_values[i][1] == 0:
                bit_len = len(format(abs(ac_values[i][1]), 'b'))               
                ac_values[i]=[ac_values[i][0],0,0]
                #print(bit_len)
                    
        else:
            bit_len = len(format(abs(ac_values[i][1]), 'b'))    
            if ac_values[i][1] == -1:
                ac_values[i]=[ac_values[i][0],1,'0']          
            elif ac_values[i][1] > 0:  
                ac_values[i]=[ac_values[i][0],bit_len,format(ac_values[i][1], 'b')]                       
                                                        
            else:
                binary = bin(abs(ac_values[i][1])^(2**(bit_len+1)-1))[-bit_len:]
                ac_values[i]=[ac_values[i][0],bit_len,binary.zfill(bit_len)]
            #print(ac_values)
    #將長度對應ac表轉成ac編碼
    ac_output = ''
    for i in range(0,ac_len):
        if ac_values[i][0] == 0 and ac_values[i][1] == 0:
            ac_values[i] = '1010' + ''
        elif ac_values[i][0] == 15 and ac_values[i][1] == 0:
            ac_values[i] = '11111111001' + '000000000000000'
        else:
            ac_pre =  iAC_Huff[ac_values[i][0]*10 + ac_values[i][1] - 1]
            #print(ac_pre)
            ac_values[i] = ac_pre + ac_values[i][2]
        ac_output = ac_output + ac_values[i]
    #print(ac_output)
    return ac_output

if __name__ == '__main__':
    ac_values = [[0, -2], [0, -17], [2, -3], [0, 1], [0, -1], [0, 2], [0, 4], [0, 2], [0, 1], [0, -1], [0, 1], [0, -1], [1, -2], [3, 1], [4, -1], 'EOB']
    output = ac(ac_values)
    print(output)